generator client {
      provider = "prisma-client-js"
    }

    datasource db {
      provider = "sqlite"
      url      = env("DATABASE_URL")
    }

    model User {
      id            Int       @id @default(autoincrement())
      email         String    @unique
      password      String
      role          Role      @default(PROMOTER)
      createdAt     DateTime  @default(now())
      updatedAt     DateTime  @updatedAt
      campaigns     Campaign[]
      referrals     Referral[]
      commissions   Commission[]
      payouts       Payout[]
      assets        Asset[]
    }

    enum Role {
      ADMIN
      PROMOTER
    }

    model Campaign {
      id          Int       @id @default(autoincrement())
      name        String
      description String?
      startDate   DateTime
      endDate     DateTime?
      budget      Float
      status      CampaignStatus @default(ACTIVE)
      createdAt   DateTime  @default(now())
      updatedAt   DateTime  @updatedAt
      userId      Int
      user        User      @relation(fields: [userId], references: [id])
      referrals   Referral[]
    }

    enum CampaignStatus {
      ACTIVE
      PAUSED
      COMPLETED
    }

    model Referral {
      id          Int       @id @default(autoincrement())
      customerEmail String
      conversionValue Float
      status      ReferralStatus @default(PENDING)
      createdAt   DateTime  @default(now())
      updatedAt   DateTime  @updatedAt
      campaignId  Int
      campaign    Campaign  @relation(fields: [campaignId], references: [id])
      userId      Int
      user        User      @relation(fields: [userId], references: [id])
      commission  Commission?
    }

    enum ReferralStatus {
      PENDING
      APPROVED
      REJECTED
    }

    model Commission {
      id          Int       @id @default(autoincrement())
      amount      Float
      status      CommissionStatus @default(PENDING)
      createdAt   DateTime  @default(now())
      updatedAt   DateTime  @updatedAt
      referralId  Int
      referral    Referral  @relation(fields: [referralId], references: [id])
      payoutId    Int?
      payout      Payout?   @relation(fields: [payoutId], references: [id])
    }

    enum CommissionStatus {
      PENDING
      PAID
      CANCELLED
    }

    model Payout {
      id          Int       @id @default(autoincrement())
      amount      Float
      status      PayoutStatus @default(PENDING)
      createdAt   DateTime  @default(now())
      updatedAt   DateTime  @updatedAt
      userId      Int
      user        User      @relation(fields: [userId], references: [id])
      commissions Commission[]
    }

    enum PayoutStatus {
      PENDING
      PAID
      FAILED
    }

    model Asset {
      id          Int       @id @default(autoincrement())
      name        String
      type        AssetType
      url         String
      createdAt   DateTime  @default(now())
      updatedAt   DateTime  @updatedAt
      userId      Int
      user        User      @relation(fields: [userId], references: [id])
      campaignId  Int?
      campaign    Campaign? @relation(fields: [campaignId], references: [id])
    }

    enum AssetType {
      IMAGE
      VIDEO
      DOCUMENT
    }
